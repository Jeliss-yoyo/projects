{"remainingRequest":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\thread-loader\\dist\\cjs.js!D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\src\\components\\resizable\\vue-resizable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\src\\components\\resizable\\vue-resizable.vue","mtime":1611052298585},{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1585119190579},{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1585119193187},{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\babel-loader\\lib\\index.js","mtime":1607477892317},{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1585119190579},{"path":"D:\\workspace\\HBuilderX\\SF-Team\\nkplat-design\\node_modules\\vue-loader\\lib\\index.js","mtime":1609899827306}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}